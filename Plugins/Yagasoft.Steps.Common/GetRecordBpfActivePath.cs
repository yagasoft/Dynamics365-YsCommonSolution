// this file was generated by the xRM Test Framework VS Extension

#region Imports

using System;
using System.Activities;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata.Query;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Workflow;
using Yagasoft.Libraries.Common;
using static Yagasoft.Libraries.Common.BpfHelpers;

#endregion

namespace Yagasoft.Steps.Common
{
	public class GetRecordBpfActivePath : CodeActivity
	{
		#region Arguments

		////[RequiredArgument]
		////[Input("Bool input"), Default("True")]
		////public InArgument<bool> Bool { get; set; }

		////[RequiredArgument]
		////[Input("DateTime input")]
		////[Default("2013-07-09T02:54:00Z")]
		////public InArgument<DateTime> DateTime { get; set; }

		////[RequiredArgument]
		////[Input("Decimal input")]
		////[Default("20.75")]
		////public InArgument<decimal> Decimal { get; set; }

		////[RequiredArgument]
		////[Input("Double input")]
		////[Default("200.2")]
		////public InArgument<double> Double { get; set; }

		////[RequiredArgument]
		////[Input("Int input")]
		////[Default("2322")]
		////public InArgument<int> Int { get; set; }

		////[RequiredArgument]
		////[Input("Money input")]
		////[Default("232.3")]
		////public InArgument<Money> Money { get; set; }

		////[RequiredArgument]
		////[Input("OptionSetValue input")]
		////[AttributeTarget("account", "industrycode")]
		////[Default("3")]
		////public InArgument<OptionSetValue> OptionSetValue { get; set; }

		[RequiredArgument]
		[Input("Target Logical Name")]
		public InArgument<string> TargetLogicalNameArg
		{
			get; set;
		}

		[RequiredArgument]
		[Input("Target ID")]
		public InArgument<string> TargetIdArg
		{
			get; set;
		}

		[RequiredArgument]
		[Input("Process ID")]
		public InArgument<string> ProcessIdArg
		{
			get; set;
		}

		[RequiredArgument]
		[Output("Stage ID CSV")]
		public OutArgument<string> StageIdCsvArg
		{
			get; set;
		}

		////[RequiredArgument]
		////[Input("EntityReference input")]
		////[ReferenceTarget("account")]
		////[Default("3B036E3E-94F9-DE11-B508-00155DBA2902", "account")]
		////public InArgument<EntityReference> AccountReference { get; set; }


		////[Output("Credit Score")]
		////[AttributeTarget("new_credit", "new_creditscore")]
		////public OutArgument<int> CreditScore {get;set;}

		#endregion

		protected override void Execute(CodeActivityContext context)
		{
			new GetRecordBpfActivePathLogic().Execute(this, context, PluginUser.System, false);
		}
	}

	internal class GetRecordBpfActivePathLogic : StepLogic<GetRecordBpfActivePath>
	{
		protected override void ExecuteLogic()
		{
			var targetLogicalName = codeActivity.TargetLogicalNameArg.Get(ExecutionContext);
			var targetIdString = codeActivity.TargetIdArg.Get(ExecutionContext);
			var processIdString = codeActivity.ProcessIdArg.Get(ExecutionContext);

			var isSuccess = Guid.TryParse(targetIdString, out var targetId);

			if (!isSuccess)
			{
				throw new FormatException("Couldn't convert target ID string into a GUID.");
			}

			isSuccess = Guid.TryParse(processIdString, out var processId);

			if (!isSuccess)
			{
				throw new FormatException("Couldn't convert process ID string into a GUID.");
			}

			var instanceId = GetBpfInstances(Service, new EntityReference(targetLogicalName, targetId), false, Context.OrganizationId)?
				.Where(i => i.ProcessId == processId).FirstOrDefault()?.Id;

			if (instanceId == null)
			{
				throw new InvalidPluginExecutionException($"Couldn't find the instance of the process: {processId}, "
					+ $"for record: {targetLogicalName}:{targetId}.");
			}

			var activePath = GetActivePath(Service, instanceId.Value);
			var activePathString = string.Join(",", activePath).ToUpper();
			TracingService.Trace("Active path: {0}", activePathString);

			codeActivity.StageIdCsvArg.Set(ExecutionContext, activePathString);
		}
	}
}
